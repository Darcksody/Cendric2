#include "FileIO/ConfigurationWriter.h"
#include "ResourceManager.h"

using namespace std;

bool ConfigurationWriter::saveToFile(const ConfigurationData& data) const
{
	ofstream configuration(g_resourceManager->getFilename(ResourceID::Configuration), ios::trunc);
	if (configuration.is_open())
	{
		configuration << writeConfigurationHeader();
		configuration << writeSoundOn(data);
		configuration << writeSoundVolume(data);
		configuration << writeLanguage(data);
		configuration << writeQuickcastOn(data);
		configuration << writeMainInputMap(data);
		configuration << writeAlternativeInputMap(data);
		configuration << writeMaxFPS(data);

		configuration.close();
	}
	else
	{
		g_logger->logError("ConfigurationWriter", "Unable to open file: " + string(g_resourceManager->getFilename(ResourceID::Configuration)));
		return false;
	}
	return true;
}

std::string ConfigurationWriter::writeConfigurationHeader() const
{
	std::stringstream ss;
	ss
		<< "###############################################\n"
		<< "# CENDRIC CONFIGURATION                       #\n"
		<< "# This file is automatically generated        #\n"
		<< "# If you know what you're doing, you can      #\n"
		<< "# modify the configuration here.              #\n"
		<< "###############################################\n"
		<< "\n";
	return ss.str();
}

std::string ConfigurationWriter::writeSoundOn(const ConfigurationData& data) const
{
	string soundOn = "# 0 means sound off, 1 means sound on\n";
	return soundOn.append(string(SOUND_ON) + ":" + (data.isSoundOn ? "1" : "0")  + "\n");
}

std::string ConfigurationWriter::writeQuickcastOn(const ConfigurationData& data) const
{
	string quickcastOn = "# 0 means quickcast off, 1 means quickcast on\n";
	return quickcastOn.append(string(QUICKCAST_ON) + ":" + (data.isQuickcast ? "1" : "0") + "\n");
}

std::string ConfigurationWriter::writeSoundVolume(const ConfigurationData& data) const
{
	string soundVolume = "# this is the sound volume in percent (0 - 100)\n";
	return soundVolume.append(string(SOUND_VOLUME) + ":" + to_string(data.volume) + "\n");
}

std::string ConfigurationWriter::writeLanguage(const ConfigurationData& data) const
{
	string language = "# 1 for EN, 2 for DE, 3 for CH\n";
	return language.append(string(LANGUAGE) + ":" + to_string(static_cast<int>(data.language)) + "\n");
}

std::string ConfigurationWriter::writeMaxFPS(const ConfigurationData& data) const
{
	string fps = "# the fps limit for the game. Choose a value between 30 and 100\n";
	return fps.append(string(MAX_FPS) + ":" + to_string(data.maxFrameRate) + "\n");
}

std::string ConfigurationWriter::writeMainInputMap(const ConfigurationData& data) const
{
	string inputMap = "# the key input mapping.\n";
	inputMap.append("# for key map values (values before comma) guess which is which.\n");
	inputMap.append("# for keyboard key values (values after comma) see SFML -> Keyboard.\n");

	for (auto it : data.mainKeyMap)
	{
		inputMap.append(string(MAIN_INPUT_MAPPING));
		inputMap.append(":");
		inputMap.append(to_string(static_cast<int>(it.first)));
		inputMap.append(",");
		inputMap.append(to_string(static_cast<int>(it.second)));
		inputMap.append("\n");
	}
	return inputMap;
}

std::string ConfigurationWriter::writeAlternativeInputMap(const ConfigurationData& data) const
{
	string inputMap = "# the alternative key input mapping.\n";

	for (auto it : data.alternativeKeyMap)
	{
		inputMap.append(string(ALTERNATIVE_INPUT_MAPPING));
		inputMap.append(":");
		inputMap.append(to_string(static_cast<int>(it.first)));
		inputMap.append(",");
		inputMap.append(to_string(static_cast<int>(it.second)));
		inputMap.append("\n");
	}
	return inputMap;
}